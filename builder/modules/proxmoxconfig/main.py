#!/usr/bin/env python3
# calamares/modules/proxmoxconfig/main.py

"""
Proxmox Configuration Module
Configures Proxmox VE on the target system
"""

import subprocess
import os
import socket
import json
from pathlib import Path
import libcalamares
from libcalamares.utils import check_target_env_call, target_env_call

def pretty_name():
    return "Configuring Proxmox VE"

def pretty_status_message():
    return "Setting up Proxmox VE environment..."

def run():
    """Configure Proxmox VE installation"""

    pool_name = libcalamares.globalstorage.value("install_pool")
    dataset = libcalamares.globalstorage.value("install_dataset")

    libcalamares.utils.debug(f"Configuring Proxmox on {pool_name}/{dataset}")

    try:
        # Configure networking
        configure_network()

        # Configure storage
        configure_storage(pool_name)

        # Setup Proxmox cluster
        setup_proxmox_cluster()

        # Apply ZFS tuning
        apply_zfs_tuning()

        # Configure services
        configure_services()

        # Write post-install notes
        create_post_install_notes()

        libcalamares.utils.debug("Proxmox configuration complete")
        return None

    except Exception as e:
        libcalamares.utils.error(f"Proxmox configuration failed: {str(e)}")
        return (f"Configuration failed",
                f"Failed to configure Proxmox VE: {str(e)}")

def configure_network():
    """Configure network for Proxmox"""

    libcalamares.utils.debug("Configuring network")

    # Get current hostname
    hostname = socket.gethostname()

    # Write hostname
    check_target_env_call(["hostnamectl", "set-hostname", hostname])

    # Configure hosts file
    hosts_content = f"""127.0.0.1    localhost
127.0.1.1    {hostname}.localdomain {hostname}

# IPv6
::1          localhost ip6-localhost ip6-loopback
ff02::1      ip6-allnodes
ff02::2      ip6-allrouters
"""

    target_hosts_path = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/hosts")
    with open(target_hosts_path, 'w') as f:
        f.write(hosts_content)

    # Configure default network interface
    interfaces_content = """# Network interfaces managed by Proxmox VE
auto lo
iface lo inet loopback

auto vmbr0
iface vmbr0 inet dhcp
    bridge_ports eth0
    bridge_stp off
    bridge_fd 0
"""

    target_interfaces_path = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/network/interfaces")
    with open(target_interfaces_path, 'w') as f:
        f.write(interfaces_content)

def configure_storage(pool_name):
    """Configure ZFS storage for Proxmox"""

    libcalamares.utils.debug(f"Setting up storage with pool {pool_name}")

    # Create Proxmox storage configuration
    storage_cfg = f"""# ZFS storage configuration for Proxmox VE
# Generated by Z-Forge installer

dir: local
    path /var/lib/vz
    content iso,vztmpl,backup

zfspool: {pool_name}
    pool {pool_name}
    content images,rootdir
    nodes localhost
"""

    # Write storage.cfg
    target_storage_dir = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/pve")
    os.makedirs(target_storage_dir, exist_ok=True)

    target_storage_path = os.path.join(target_storage_dir, "storage.cfg")
    with open(target_storage_path, 'w') as f:
        f.write(storage_cfg)

    # Create directory for VM storage
    target_vz_dir = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "var/lib/vz")
    os.makedirs(target_vz_dir, exist_ok=True)

    # Create VM images directory
    target_images_dir = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "var/lib/vz/images")
    os.makedirs(target_images_dir, exist_ok=True)

def setup_proxmox_cluster():
    """Initialize Proxmox cluster"""

    libcalamares.utils.debug("Setting up Proxmox cluster")

    # Create post-install script to set up cluster
    cluster_script = """#!/bin/bash
# Proxmox cluster setup script

# Create cluster if not exists
if [ ! -f /etc/pve/corosync.conf ]; then
    pvecm create zforge-cluster
fi

# Ensure services are enabled
systemctl enable pve-cluster
systemctl enable pvedaemon
systemctl enable pveproxy
systemctl enable pvestatd
systemctl enable pvenetcommit
systemctl enable spiceproxy
"""

    # Write script
    target_script_dir = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "usr/local/bin")
    os.makedirs(target_script_dir, exist_ok=True)

    target_script_path = os.path.join(target_script_dir, "pve-setup-cluster.sh")
    with open(target_script_path, 'w') as f:
        f.write(cluster_script)
    os.chmod(target_script_path, 0o755)

    # Add to startup
    rc_local_content = """#!/bin/bash
# rc.local for Proxmox VE setup

# Setup Proxmox cluster on first boot
if [ -f /usr/local/bin/pve-setup-cluster.sh ]; then
    /usr/local/bin/pve-setup-cluster.sh
    # Remove script after execution
    rm /usr/local/bin/pve-setup-cluster.sh
fi

exit 0
"""

    target_rc_local = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/rc.local")
    with open(target_rc_local, 'w') as f:
        f.write(rc_local_content)
    os.chmod(target_rc_local, 0o755)

def apply_zfs_tuning():
    """Apply ZFS performance tuning"""

    libcalamares.utils.debug("Applying ZFS tuning")

    # Get benchmark results if available
    benchmark_results = libcalamares.globalstorage.value("zfs_benchmark_results")

    # Default tuning params
    arc_max = "4G"  # Default to 4GB ARC
    compression = "lz4"  # Default compression

    # Apply benchmark results if available
    if benchmark_results:
        if "compression" in benchmark_results:
            compression = benchmark_results["compression"]

    # Create modprobe config
    modprobe_content = f"""# ZFS module parameters
options zfs zfs_arc_max={arc_max}
"""

    target_modprobe_dir = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/modprobe.d")
    os.makedirs(target_modprobe_dir, exist_ok=True)

    target_modprobe_path = os.path.join(target_modprobe_dir, "zfs.conf")
    with open(target_modprobe_path, 'w') as f:
        f.write(modprobe_content)

    # Create sysctl config
    sysctl_content = """# ZFS performance tuning
vm.swappiness=10
vm.min_free_kbytes=524288
vm.dirty_background_ratio=10
vm.dirty_ratio=20
kernel.sched_migration_cost_ns=5000000
"""

    target_sysctl_dir = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/sysctl.d")
    os.makedirs(target_sysctl_dir, exist_ok=True)

    target_sysctl_path = os.path.join(target_sysctl_dir, "zfs-tuning.conf")
    with open(target_sysctl_path, 'w') as f:
        f.write(sysctl_content)

    # Create script to set ZFS properties after pool import
    zfs_tuning_script = f"""#!/bin/bash
# ZFS properties tuning script

# Set compression on datasets
zfs set compression={compression} rpool
"""

    target_script_path = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "usr/local/bin/zfs-tune.sh")
    with open(target_script_path, 'w') as f:
        f.write(zfs_tuning_script)
    os.chmod(target_script_path, 0o755)

    # Add to rc.local
    rc_local = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "etc/rc.local")
    with open(rc_local, 'r') as f:
        content = f.read()

    if "/usr/local/bin/zfs-tune.sh" not in content:
        new_content = content.replace("exit 0", "/usr/local/bin/zfs-tune.sh\nexit 0")
        with open(rc_local, 'w') as f:
            f.write(new_content)

def configure_services():
    """Configure system services"""

    libcalamares.utils.debug("Configuring services")

    # Enable required services
    services = [
        "pve-cluster",
        "pvedaemon",
        "pveproxy",
        "pvestatd",
        "pvenetcommit",
        "spiceproxy"
    ]

    for service in services:
        check_target_env_call(["systemctl", "enable", service])

    # Disable subscription notice
    js_path = os.path.join(libcalamares.globalstorage.value("rootMountPoint"),
                           "usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js")

    if os.path.exists(js_path):
        # Backup original file
        os.system(f"cp {js_path} {js_path}.bak")

        # Disable subscription nag
        os.system(f"sed -i 's/.*Ext.Msg.show.*No valid subscription.*/void 0;/' {js_path}")

def create_post_install_notes():
    """Create post-installation notes"""

    libcalamares.utils.debug("Creating post-install notes")

    post_install_notes = """# Z-Forge Proxmox VE - Post-Installation Notes

## System Configuration

Your Proxmox VE system has been installed with ZFS. The following configurations have been applied:

- ZFS pool with compression and optimized settings
- Network bridge (vmbr0) configured for VM networking
- Proxmox cluster initialized as 'zforge-cluster'
- Performance tuning applied for ZFS and system

## First Steps

1. **Access the Web Interface**:
   - Open a browser and navigate to: https://<your-ip>:8006
   - Login with root credentials you set during installation

2. **Update System**:
   - From shell: `apt update && apt dist-upgrade`
   - Reboot after updates: `reboot`

3. **Create VMs and Containers**:
   - Use the web interface to create your first VM or container
   - Templates are automatically downloaded from Proxmox repositories

## Network Configuration

The system is configured with a bridge interface (vmbr0) that uses DHCP.
To configure static IP, edit `/etc/network/interfaces`.

## Storage

ZFS storage has been configured for VM and container storage.
Pool health can be monitored with: `zpool status`

## Backup and Recovery

- Recovery scripts are available in `/root/zforge-recovery/`
- Use `zfs snapshot` for point-in-time backups
- Explore Proxmox backup functionality through the web UI

## Additional Resources

- Proxmox Documentation: https://pve.proxmox.com/wiki/
- ZFS Documentation: https://openzfs.github.io/openzfs-docs/
- Z-Forge Project: https://github.com/user/z-forge

Thank you for using Z-Forge Proxmox VE!
"""

    notes_path = os.path.join(libcalamares.globalstorage.value("rootMountPoint"), "root/POST_INSTALL.md")
    with open(notes_path, 'w') as f:
        f.write(post_install_notes)
